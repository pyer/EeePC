#!/bin/sh
PATH=/sbin:/bin
[ -x /sbin/resolvconf ] || exit 0

RUN_DIR=/run/resolvconf
ENABLE_UPDATES_FLAGFILE="${RUN_DIR}/enable-updates"
POSTPONED_UPDATE_FLAGFILE="${RUN_DIR}/postponed-update"

wipe_runtime_directories()
{
	# Delete files in the resolvconf run directory (target) but not the directory itself
	[ -d "$RUN_DIR" ] || return
	rm -f "$RUN_DIR"/resolv.conf
	rm -f "$ENABLE_UPDATES_FLAGFILE"
	rm -f "$POSTPONED_UPDATE_FLAGFILE"
	rm -rf "${RUN_DIR}/interface/*"
}

create_runtime_directories()
{
	umask 022
	# Create directory at the target
  mkdir -p "$RUN_DIR"
	if [ ! -d "$RUN_DIR" ] ; then
		echo "Error creating directory $RUN_DIR"
    exit 1
	fi
	# The resolvconf run directory now exists.
  mkdir -p "${RUN_DIR}/interface"
	if [ ! -d "${RUN_DIR}/interface" ] ; then
		echo "Error creating directory ${RUN_DIR}/interface"
    exit 1
	fi
	# The interface directory now exists.  We are done.
}

echo "Setting up resolvconf"
# Wipe runtime directories in case they aren't on a tmpfs
wipe_runtime_directories
# Create runtime directories in case they are on a tmpfs
create_runtime_directories
# Request a postponed update (needed in case the base file has content).
:> "$POSTPONED_UPDATE_FLAGFILE" || echo "  failed requesting updates"
# Enable updates and perform the postponed update.
resolvconf --enable-updates || echo "  failed to enable updates"
exit 0
