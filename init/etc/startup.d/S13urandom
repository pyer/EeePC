#! /bin/sh
PATH=/sbin:/bin

SAVEDFILE=/var/lib/urandom/random-seed

[ -c /dev/urandom ] || exit 0

if ! POOLBYTES=$((
  ($(cat /proc/sys/kernel/random/poolsize 2>/dev/null) + 7) / 8
)) ; then
  POOLBYTES=512
fi

echo "Initializing random number generator"
	# Seed the RNG with date and time.
	# This is helpful in the less-than-ideal case where $SAVEDFILE
	# is read-only.
	# The value of this is greatly reduced if $SAVEDFILE is missing,
	# or its contents are shared machine-to-machine or known to
	# attackers (since they might well know at what time this
	# machine booted up).
(
	  /usr/bin/date +%s.%N

	  # Load and then save $POOLBYTES bytes,
	  # which is the size of the entropy pool
	  if [ -f "$SAVEDFILE" ]
	  then
		  cat "$SAVEDFILE"
	  fi
	# Redirect output of subshell (not individual commands)
	# to cope with a misfeature in the FreeBSD (not Linux)
	# /dev/random, where every superuser write/close causes
	# an explicit reseed of the yarrow.
) >/dev/urandom

	# Write a new seed into $SAVEDFILE because re-using a seed
	# compromises security.  Each time we re-seed, we want the
	# seed to be as different as possible.
	# Write it now, in case the machine crashes without doing
	# an orderly shutdown.
	# The write will fail if $SAVEDFILE is read-only, but it
	# doesn't hurt to try.
umask 077
dd if=/dev/urandom of=$SAVEDFILE bs=$POOLBYTES count=1 >/dev/null 2>&1
umask 022
